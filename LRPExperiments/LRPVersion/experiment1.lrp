;;; Understandability experiment
;;; Program asks for a direction and goes there
;;; Then wait for a virtual bump and returns
;;; move -> /mobile_base/commands/velocity
;;; goal -> /move_base_simple/goal
;;; bumper <- /sensors_simulator/sensors/bumper
;;; reached <- /move_base/result
;;; hasObject <- /sensors_simulator/sensors/object
;;; destination <- /sensors_simulator/data/destination

;;change points to experiment
(var destinations := [
	{	#init -> (-0.68@ -0.7).
		#cilinder -> (-1.20@ -2.23).
		#trashContainer -> (1.05@ -2.24).
		#bookshelf -> (0.23@ 1.02).
		#cube -> (0.42@ -0.75).
		#barrier -> (-3.47@ 0)
	} asDictionary
	]
)

(machine Transporter
	(var goToDestination := [false])
	(var returnToOrigin := [false])
	
	(state onOrigin
		(machine PrepareObject
			(state waitingForObject)
			(state waitingForDestination
				(onentry [robot destination: nil])
			)
			(state receivedDestination
				(onentry [goToDestination := true])
			)
			
			(on hasObject waitingForObject -> waitingForDestination)
			(on destination waitingForDestination -> receivedDestination)
			
			(event hasObject [robot hasObject data])
			(event destination [robot destination  isNotNil])
		)
		(onentry (spawn PrepareObject waitingForObject))
		(onexit [goToDestination := false])
	)
	(state goingToDestination
		(onentry [
			robot reached: nil.
			robot goal: [:msg| |coordinates|
				coordinates := 
					destinations 
						at: robot destination data asSymbol
						ifAbsent: (destinations at: #init).
				msg header frame_id: 'map'.
				msg pose
					position x: coordinates x.
				msg pose
					position y: coordinates y.
				msg pose
					orientation z: 0.892.
				msg pose
					orientation w: -1.5.	
			]
		])
	)
	(state onDestination
		(machine DeliverObject
			(state waitingForRetrieving)
			(state backward
				(running [robot move: [:data| data linear x: -0.2]])
			)
			(state end
				(onentry [returnToOrigin := true])
			)
			
			(on objectDelivered waitingForRetrieving -> backward)
			(ontime 500 backward -> end)
			
			(event objectDelivered [robot bumper data])
		)
		(onentry (spawn DeliverObject waitingForRetrieving))
		(onexit [returnToOrigin := false])
	)
	(state returning
		(onentry [
			robot reached: nil.
			robot goal: [:msg| |coordinates|
				coordinates := destinations at: #init.
				msg header frame_id: 'map'.
				msg pose
					position x: coordinates x.
				msg pose
					position y: coordinates y.
				msg pose
					orientation z: 0.892.
				msg pose
					orientation w: -1.5.	
			]
		])
	)
	
	(on goToDestination onOrigin -> goingToDestination)
	(on reachedDestination goingToDestination -> onDestination)
	(on returnToOrigin onDestination -> returning)
	(on reachedOrigin returning -> onOrigin)
	
	(event goToDestination [goToDestination])
	(event reachedDestination [robot reached isNotNil])
	(event returnToOrigin [returnToOrigin])
	(event reachedOrigin [robot reached isNotNil])
)

(spawn Transporter onOrigin)
