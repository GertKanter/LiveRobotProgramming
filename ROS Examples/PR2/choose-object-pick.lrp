;;; New program created by TomasDiaz on 21 June 2016;; LRP program which takes an object, requests in which box to place it;; and places the object in the option selected by voice.;; The program consists of a main machine with three nested ones:;; - setter handles the initial setup and position of the robot;; - speaker is the one in charge of requesting a choice from the user;;	and listening for an answer;; - placer handles placing the object in a position according to what;;	was selected.;;;; moveit -> t2moveit_cmd ;; speak -> speakme;;;; listen <- speech_recon(machine pr2	(var cmd := [[:text | robot moveit: [:msg | msg data: text]]])			(var optionChosen := ['firstbox'])		(state settingUp		(machine setter			(state closingGripper				(onentry [cmd value: 'use left_gripper'.							cmd value: 'go closedgripper']))			(state adjustingArms				(onentry [cmd value: 'use arms'.							cmd value: 'go untuck']))						(state preparedToPlace)			(ontime 3500 closingGripper -> adjustingArms)			(ontime 3000 adjustingArms -> preparedToPlace)			(exit true preparedToPlace -> requesting)			(event true [true])		)		(onentry (spawn setter closingGripper))	)		(state requesting		(machine speaker			(var say := [[:text | robot speak: [:msg | msg data: text]]])			(var heardMessageCondition := [[:msg | robot listen data = msg]])						(state askingForOption				(onentry [say value: 'Donde guardo el objeto?']))							(state messageNotUnderstood				(onentry [say value: 'No entendi el mensaje, repita por favor']))				(state noMessageReceived				(onentry [say value: 'Sin respuesta, dejando en ultima posicion usada']))							(state listening						(onentry [robot listen: nil]))						(state deciding)						(state optionOneChosen				(onentry [say value: 'Opcion uno elegida'])				(onexit [optionChosen := 'firstbox']))							(state optionTwoChosen				(onentry [say value: 'Opcion dos elegida'])				(onexit [optionChosen := 'secondbox']))							(state optionThreeChosen				(onentry [say value: 'Opcion tres elegida'])				(onexit [optionChosen := 'thirdbox']))												(event receivingMessage [robot listen notNil])						(event hearingOptionOne [heardMessageCondition value: 'number one'])			(event hearingOptionTwo [heardMessageCondition value: 'number two'])			(event hearingOptionThree [heardMessageCondition value: 'number three'])						(eps askingForOption -> listening)			(eps noMessageReceived -> exitingMachine)							(on receivingMessage listening -> deciding)			(on hearingOptionOne deciding -> optionOneChosen)			(on hearingOptionTwo deciding -> optionTwoChosen)			(on hearingOptionThree deciding -> optionThreeChosen)			(eps deciding -> messageNotUnderstood)			(ontime 2000 messageNotUnderstood -> listening)						(ontime 10000 listening -> noMessageReceived)			(exit true optionOneChosen -> placing)			(exit true optionTwoChosen -> placing)			(exit true optionThreeChosen -> placing)			(exit true noMessageReceived -> placing)			(event true [true])		)				(onentry (spawn speaker askingForOption))	)	(state placing		(machine placer								(state goingToBox				(onentry [cmd value: 'use left_arm '.							cmd value: 'go ' , optionChosen])) 			(state openingGripper				(onentry [cmd value: 'use left_gripper'.							cmd value: 'go openedgripper']))								(state placedObject)						(ontime 3000 goingToBox -> openingGripper)			(ontime 3500 openingGripper -> placedObject)			(exit true placedObject -> settingUp)			(event true [true])							)				(onentry (spawn placer goingToBox))	)		)(spawn pr2 settingUp)