;;; New program created by TomasDiaz on 21 June 2016;; LRP Program that moves to a certain position in front of a table;; then loops asking for an object to take, asking where to place it;; (amongst three options) and finally placing it where it was told ;; to do so (by voice).;; It consists of a main machine where four others are nested:;; - positioner machine is in charge of positioning the robot in front ;;	of the table;; - receiver machine, which asks for an object and grabs it;; - requester machine, which asks for a place to put the received object.;;	It knows of three places where to put objects and if no request is;;	received, then it goes to position one by default. It may also not;;	understand the request, in which case it asks again.;; - placer machine, which places the object in the position that was requested;; It should ideally run with MoveIt, Festival and a node with speech recognition.;; moveit -> t2moveit_cmd ;; speak -> speakme;; gripperGoal -> l_gripper_controller/gripper_action/goal;; move -> base_controller/command;;;; listen <- speech_recon;; laser <- base_scan(machine pr2	(var cmd := [[:text | robot moveit: [:msg | msg data: text]]])		(var gripperGo := [[:pos :effort | 			robot gripperGoal: [:gripper | gripper goal command position: pos. 				gripper goal command max_effort: effort]]])		(var optionChosen := ['firstbox'])	(var say := [[:text | robot speak: [:msg | msg data: text]]])	(var readyToPlace := [false])		(state clgrip (onentry [gripperGo value: 0 value: 20])) 	(state positioning 		(machine positioner			(var moveToSideBy := [[:val | robot move: [:twist | twist linear y: val]]])			(var laserPointsFromTo := [[:init :end | robot laser ranges copyFrom: init to: end]])			(state aligned)					(state stopped  		     		(onentry [robot move:   		  		    		   [:twist | twist linear x: 0.0.    		              				  twist angular z: 0.0]]))			(state adjustingTorso				(onentry [robot moveit: [:msg | msg data: 'use torso'.										msg data: 'go extended_torso']]))			(state movingForward				(running [robot move: [:twist | twist linear x: 0.05]]))			(state movingRight				(running [moveToSideBy value: -0.05]))			(state movingLeft				(running [moveToSideBy value: 0.05]))			(event closeEnoughToTable 				[((robot laser ranges copyFrom: 378 to: 695 ) select: [:laserPoint | laserPoint <= 0.30]) size >= 30])				(event tooMuchToTheRight				[((robot laser ranges copyFrom: 380 to: 395) select: [:point | point >= 0.4]) size > 4])		(event tooMuchToTheLeft			[((robot laser ranges copyFrom: 680 to: 694) select: [:point | point >= 0.4]) size > 4])			(event alignedSides 				[(((robot laser ranges copyFrom: 380 to: 390) select: [:point | (point - 0.38) abs < 0.03]) size >= 4) and: (((robot laser ranges copyFrom: 684 to: 694) select: [:point | (point - 0.38) abs < 0.03]) size >= 4) ])				(event imminentCollision				[(robot laser ranges select: [:laserPoint | laserPoint <= 0.25]) size >= 5])					(ontime 10000 adjustingTorso -> movingForward)			(on closeEnoughToTable movingForward -> stopped)			(on tooMuchToTheRight stopped -> movingLeft)			(on tooMuchToTheRight movingRight -> movingLeft)			(on tooMuchToTheLeft stopped -> movingRight)			(on tooMuchToTheLeft movingLeft -> movingRight)			(exit  true aligned -> receivingObject)			(event true [true])			(on alignedSides *-> aligned)			(on imminentCollision *-> stopped)		)				(onentry (spawn positioner movingForward))	)		(state receivingObject		(machine receiver			(var count := [2])			(state closingGripper				(onentry [cmd value: 'use left_gripper'.							cmd value: 'go closedgripper']))			(state adjustingArms				(onentry [cmd value: 'use arms'.							cmd value: 'go untuck']))									(state askingForObject				(onentry [say value: 'Dame un objeto'.							gripperGo value: 0.04 value: 20])				(onexit [say value: 'Cerrando gripper en']))							(state countDown				(onentry [count := count - 1]))			(state speakCountDown				(onentry [say value: count asString]))							(state grabbingObject				(onentry [gripperGo value: 0.02 value: 20]))						(state preparedToPlace				(onentry [readyToPlace := true])				(onexit [readyToPlace := false]))							(ontime 1500 closingGripper -> adjustingArms)			(ontime 3000 adjustingArms -> askingForObject)			(ontime 3500 askingForObject -> speakCountDown)			(ontime 2000 speakCountDown -> countDown)			(eps countDown -> speakCountDown)			(on [count = 1] speakCountDown -> grabbingObject)			(ontime 3000 grabbingObject -> preparedToPlace)					;	(exit true preparedToPlace -> requesting)		;	(event true [true])		)		(onentry (spawn receiver closingGripper))	)		(state requesting		(machine speaker						(var heardMessageCondition := [[:msg | robot listen data = msg]])						(state askingForOption				(onentry [say value: 'Donde guardo el objeto?']))							(state messageNotUnderstood				(onentry [say value: 'No entendi el mensaje, repita por favor']))				(state noMessageReceived				(onentry [say value: 'Sin respuesta, dejando en posicion uno'])				(onexit [optionChosen := 'firstbox']))							(state listening						(onentry [robot listen: nil]))						(state deciding)						(state optionOneChosen				(onentry [say value: 'Opcion uno elegida'])				(onexit [optionChosen := 'firstbox']))							(state optionTwoChosen				(onentry [say value: 'Opcion dos elegida'])				(onexit [optionChosen := 'secondbox']))							(state optionThreeChosen				(onentry [say value: 'Opcion tres elegida'])				(onexit [optionChosen := 'thirdbox']))												(event receivingMessage [robot listen notNil])						(event hearingOptionOne [heardMessageCondition value: 'number one'])			(event hearingOptionTwo [heardMessageCondition value: 'number two'])			(event hearingOptionThree [heardMessageCondition value: 'number three'])						(eps askingForOption -> listening)			(eps noMessageReceived -> exitingMachine)							(on receivingMessage listening -> deciding)			(on hearingOptionOne deciding -> optionOneChosen)			(on hearingOptionTwo deciding -> optionTwoChosen)			(on hearingOptionThree deciding -> optionThreeChosen)			(eps deciding -> messageNotUnderstood)			(ontime 2000 messageNotUnderstood -> listening)						(ontime 5000 listening -> noMessageReceived)			(exit true optionOneChosen -> placing)			(exit true optionTwoChosen -> placing)			(exit true optionThreeChosen -> placing)			(exit true noMessageReceived -> placing)			(event true [true])		)				(onentry (spawn speaker askingForOption))	)	(state placing		(machine placer								(state goingToBox				(onentry [cmd value: 'use left_arm '.							cmd value: 'go ' , optionChosen])) 			(state openingGripper				(onentry [gripperGo value: 0.04 value: 20]))								(state placedObject)						(ontime 3000 goingToBox -> openingGripper)			(ontime 1000 openingGripper -> placedObject)			(exit true placedObject -> receivingObject)			(event true [true])							)				(onentry (spawn placer goingToBox))	)		(on [readyToPlace] receivingObject -> requesting))(spawn pr2 positioning)